<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd        
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd        
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd">
    <context:property-placeholder location="classpath*:jdbc.properties"/>

    <rabbit:connection-factory id="rabbitConnectionFactory" host="${rabbit.server.ip}" port="${rabbit.server.port}"
                               channel-cache-size="15" username="${rabbit.server.username}"
                               password="${rabbit.server.password}"/>

  
    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.JsonMessageConverter"/>

    <rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"
                     message-converter="jsonMessageConverter"/>

    <rabbit:listener-container concurrency="10" connection-factory="rabbitConnectionFactory"
                                message-converter="jsonMessageConverter">  
        <rabbit:listener ref="invoiceSendPlatformServerHandler" method="handleMessage"
                         queue-names="${rabbit.queue.invoice.sendplatformserver}"/> 
    </rabbit:listener-container>
    
    <rabbit:listener-container concurrency="10" connection-factory="rabbitConnectionFactory"
                                message-converter="jsonMessageConverter">  
        <rabbit:listener ref="invoiceSend51PlatformHandler" method="handleMessage"
                         queue-names="${rabbit.queue.invoice.send51platform}"/> 
    </rabbit:listener-container>

    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" p:driverClassName="${jdbc.driverClassName}"
          p:url="${jdbc.url}" p:connectionProperties="druid.stat.slowSqlMillis=5000;druid.stat.logSlowSql=true"
          p:username="${jdbc.username}" p:removeAbandoned="true" p:removeAbandonedTimeout="3600" p:logAbandoned="true"

          p:password="${jdbc.password}" p:minIdle="1"
          p:maxActive="10" p:poolPreparedStatements="true" p:maxPoolPreparedStatementPerConnectionSize="20"
          p:initialSize="1" p:maxWait="60000" p:testWhileIdle="true"  p:validationQuery="select 1" p:timeBetweenEvictionRunsMillis="60000" p:filters="stat,slf4j">
        <description>开发环境配置</description>
    </bean>

    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="configLocation" value="classpath:ibatis/sql-map-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 激活annotation功能 -->
    <context:annotation-config/>
    <!-- 激活annotation功能 -->
    <context:spring-configured/>
    <!-- 扫描指定package下所有带有如@controller,@services,@resource,并把所注释的注册为Spring Beans -->
    <context:component-scan base-package="com.aisino"/>
    <!-- 支持上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

    <!-- 事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource">
        <description>开发环境配置</description>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:aspectj-autoproxy/>
    <!-- 通过AOP实现横向切入 -->
    <aop:config>
        <aop:advisor pointcut="execution(* com.aisino.domain.*.*.impl.*.*(..))" advice-ref="txAdvice"/>
    </aop:config>
</beans>