<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/aop
						 	http://www.springframework.org/schema/aop/spring-aop.xsd
							http://www.springframework.org/schema/tx
							http://www.springframework.org/schema/tx/spring-tx.xsd
						 	http://www.springframework.org/schema/rabbit
                            http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd
						 	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx">

	<context:property-placeholder location="classpath*:general.properties" />

	<context:component-scan base-package="com.aisino" />
	
	<import resource="classpath*:/META-INF/zkconfig.xml" />
	<bean id="webController" class="com.aisino.einvoice.controller.impl.EInvWebControllerImpl"
	  p:invUploadService-ref="invUploadService"
	p:businessHandler-ref="businessHandler" p:orderHandler-ref="orderHandler"

	 />
	
<!-- 	 <bean id="webController2" class="com.aisino.einvoice.controller.impl.EInvWebControllerImpl"  p:invUploadService-ref="invUploadService"
	p:businessHandler-ref="businessHandler" /> -->
        
    <bean id="invUploadService" class="com.aisino.einvoice.service.impl.InvUploadServiceImpl"
          p:uniqueResourceManagerService-ref="uniqueResourceManagerService" p:invoiceDataAccessManagerService-ref="invoiceDataAccessManagerService" p:invoiceDataCheckService-ref="invoiceDataCheckService"
           p:repository-ref="repository" p:businessHandler-ref="businessHandler"/>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}" p:connectionProperties="druid.stat.slowSqlMillis=5000;druid.stat.logSlowSql=true"
		p:username="${jdbc.username}" p:removeAbandoned="true"
		p:removeAbandonedTimeout="3600" p:logAbandoned="true" p:password="${jdbc.password}"
		p:minIdle="1" p:maxActive="10" p:poolPreparedStatements="true"
		p:maxPoolPreparedStatementPerConnectionSize="20" p:initialSize="1"
		p:maxWait="60000" p:timeBetweenEvictionRunsMillis="60000" p:filters="stat,slf4j">
		<description>开发环境配置</description>
	</bean>
	

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<bean id="sqlSessionFactoryName" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:config/ibatis/sql-map-config.xml" />

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryName" />
	</bean>

	<bean id="jsonMessageConverter"
		class="org.springframework.amqp.support.converter.JsonMessageConverter" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="mod*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="ret*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="find*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="load*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="query*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="export*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="logout*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="reg*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="process*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 通过AOP实现横向切入 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.aisino.*.service.*.*(..))" advice-ref="txAdvice" />
	</aop:config>
	
	<rabbit:connection-factory id="rabbitConnectionFactory"
		host="${rabbit.server.ip}" port="${rabbit.server.port}"
		channel-cache-size="15" username="${rabbit.server.username}" password="${rabbit.server.password}" />

	<bean id="rabbitTxManager"
		class="org.springframework.amqp.rabbit.transaction.RabbitTransactionManager"
		p:connectionFactory-ref="rabbitConnectionFactory" />

	<rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"
		routing-key="${rabbit.queue.invoice.taxcode}" message-converter="jsonMessageConverter" />  

<!-- 2017-07-19 宋雪冬 添加双rabbitMQ队列配置，用于把发票订单信息上传至大象平台查询发票 配置开始 -->
	<rabbit:connection-factory id="rabbitConnectionFactory2"
		host="${rabbit.server.ip2}" port="${rabbit.server.port2}"
		channel-cache-size="15" username="${rabbit.server.username2}" password="${rabbit.server.password2}" />

	<bean id="rabbitTxManager2"
		class="org.springframework.amqp.rabbit.transaction.RabbitTransactionManager"
		p:connectionFactory-ref="rabbitConnectionFactory2" />

	<rabbit:template id="amqpTemplate2" connection-factory="rabbitConnectionFactory2"
		routing-key="${rabbit.queue.invoice.orderinfo}" message-converter="jsonMessageConverter" />  
<!-- 2017-07-19 宋雪冬 添加双rabbitMQ队列配置，用于把发票订单信息上传至大象平台查询发票 配置结束-->
		
	
	<bean id="eInvoiceSubRepositoryMyBatis"
		class="com.aisino.domain.einvoice.repository.mybatis.EInvoiceSubRepositoryMyBatis"
		p:template-ref="sqlSessionTemplate">
	</bean>
	
	<bean id="repository"
		class="com.aisino.domain.einvoice.repository.mybatis.EInvoiceSubRepositoryMyBatis"
		p:template-ref="sqlSessionTemplate">
	</bean>

	<bean id="businessHandler" class="com.aisino.einvoice.service.EInvoiceBusinessMap"
		p:rabbitTemplate-ref="amqpTemplate" p:repository-ref="eInvoiceSubRepositoryMyBatis" />
		
		
	<bean id="orderHandler" class="com.aisino.einvoice.service.OrderBusinessMap"
		p:rabbitTemplate-ref="amqpTemplate2"/>

	<!--Construct unique resource routing repository map-->
	<bean id="eInvoiceRepositoryMyBatis"
		class="com.aisino.domain.einvoice.repository.mybatis.EInvoiceRepositoryMyBatis"
		p:template-ref="sqlSessionTemplate">
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.guava.GuavaCacheManager">
		<constructor-arg index="0" value="eshopPCKS7Cache" />
	</bean>
	
	<import resource="classpath:config/spring/cxf-servlet.xml"/>
</beans>
